TEST 1:

SELECT DISTINCT S_name
FROM
(SELECT F_key, F_name, C_name, LHS.S_key, S_name, level
FROM
(SELECT F_key, F_name, RHS.C_name, S_key
FROM
(SELECT LHS.F_key, F_name, C_name
FROM input2 AS LHS
INNER JOIN input0 AS RHS ON (LHS.F_key = RHS.F_key)) AS LHS
INNER JOIN input1 AS RHS ON (LHS.C_name = RHS.C_name)) AS LHS
INNER JOIN input3 AS RHS ON (LHS.S_key = RHS.S_key)) AS FOO
WHERE (level = 'JR' AND F_name = 'faculty1â€™);


SELECT DISTINCT S_name
FROM input0 i0
INNER JOIN input2 i2 ON i0.F_key = i2.F_key
INNER JOIN input1 i1 ON i0.C_name = i1.C_name
INNER JOIN input3 i3 ON i1.S_key = i3.S_key
WHERE (level = 'JR' AND F_name = 'faculty1');



TEST 4:

CREATE TABLE input0 (
C_name VARCHAR (50),
meets_at VARCHAR (50)
);

INSERT INTO input0 (C_name, meets_at) VALUES
('class1','mon'),
('class2','mon'),
('class3','tue'),
('class4','tue'),
('class5','fri'),
('class6','fri');

CREATE TABLE input1 (
S_key VARCHAR (50),
C_name VARCHAR (50)
);

INSERT INTO input1 (S_key, C_name) VALUES
('S1','class1'),
('S1','class2'),
('S1','class3'),
('S2','class1'),
('S3','class2'),
('S3','class5'),
('S3','class4'),
('S4','class2'),
('S4','class4'),
('S5','class3'),
('S6','class3'),
('S6','class4'),
('S7','class1'),
('S7','class3'),
('S7','class5'),
('S8','class4'),
('S9','class5'),
('S9','class6'),
('S10','class4'),
('S10','class5'),
('S10','class6'),
('S11','class3'),
('S11','class6'),
('S12','class1'),
('S12','class2'),
('S13','class3'),
('S13','class4'),
('S14','class5'),
('S14','class6');

CREATE TABLE input2 (
S_key VARCHAR (50),
S_name VARCHAR (50)
);

INSERT INTO input2 (S_key, S_name) VALUES
('S1','stu1'),
('S2','stu2'),
('S3','stu3'),
('S4','stu4'),
('S5','stu5'),
('S6','stu6'),
('S7','stu7'),
('S8','stu8'),
('S9','stu9'),
('S10','stu10'),
('S11','stu11'),
('S12','stu12'),
('S13','stu13'),
('S14','stu14');


SQUARE Sol:

------------------------------------- R Solution ---------------------------------------

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
input0 <- read.table("tests-examples/55-tests/tables/4-1.txt", sep =",", header=T)
input0
input0 <- copy_to(con,input0)
input1 <- read.table("tests-examples/55-tests/tables/4-2.txt", sep =",", header=T)
input1
input1 <- copy_to(con,input1)
input2 <- read.table("tests-examples/55-tests/tables/4-3.txt", sep =",", header=T)
input2
input2 <- copy_to(con,input2)
expected_output <- read.table("tests-examples/55-tests/tables/4.out", sep =",", header=T)
expected_output

RET_DF4837 <- inner_join(inner_join(input0, input1), input2)
RET_DF4838 <- RET_DF4837 %>% group_by(S_name, meets_at) %>% summarise(n = n())
RET_DF4839 <- RET_DF4838 %>% ungroup() %>% filter(n > 2 | n == 2)
RET_DF4840 <- RET_DF4839 %>% ungroup() %>% select(S_name)



+++++++++++++++++++++++++++++++++++++ SQL Solution +++++++++++++++++++++++++++++++++++++

SELECT `S_name`
FROM
  (SELECT `S_name`,
          `meets_at`,
          COUNT() AS `n`
   FROM
     (SELECT `C_name`,
             `meets_at`,
             `S_key`,
             `S_name`
      FROM
        (SELECT `C_name`,
                `meets_at`,
                `S_key`
         FROM `input0` AS `LHS`
         INNER JOIN `input1` AS `RHS` ON (`LHS`.`C_name` = `RHS`.`C_name`)) AS `LHS`
      INNER JOIN `input2` AS `RHS` ON (`LHS`.`S_key` = `RHS`.`S_key`))
   GROUP BY `S_name`,
            `meets_at`)
WHERE (`n` > 2.0
       OR `n` = 2.0)
+++++++++++++++++++++++++++++++++++++ POSTGRESQL Solution +++++++++++++++++++++++++++++++
SELECT S_name
FROM
(SELECT S_name, meets_at, COUNT(*) AS n
FROM
(SELECT C_name, meets_at, LHS.S_key, S_name
FROM
(SELECT LHS.C_name, meets_at, S_key
FROM input0 AS LHS
INNER JOIN input1 AS RHS ON (LHS.C_name = RHS.C_name)) AS LHS
INNER JOIN input2 AS RHS ON (LHS.S_key = RHS.S_key)) AS FOO
GROUP BY S_name, meets_at) AS FOO
WHERE (n > 2.0 OR n = 2.0);

++++++++++++++++++++++++++++++++++++++ OPTIMAL POSTGRESQL +++++++++++++++++++++++++++++++++
SELECT S_name
FROM
(SELECT S_name, meets_at, COUNT(*) AS n
FROM (input0 i0
INNER JOIN input1 i1 on i0.C_name = i1.C_name
INNER JOIN input2 i2 on i1.S_key = i2.S_key) AS FOO
GROUP BY S_name, meets_at) AS FOO
WHERE (n = 2.0);



++++++++++++++++++++++++++++++++++++++ EXPENSIVE CASES ++++++++++++++++++++++++++++++++++++
4

Generated:
RET_DF4837 <- inner_join(inner_join(input0, input1), input2)
RET_DF4838 <- RET_DF4837 %>% group_by(S_name, meets_at) %>% summarise(n = n())
RET_DF4839 <- RET_DF4838 %>% ungroup() %>% filter(n > 2 | n == 2)
RET_DF4840 <- RET_DF4839 %>% ungroup() %>% select(S_name)

Optimal:
inner_join(class,enroll) %>% inner_join(student) %>% 
group_by(S_name,meets_at) %>% summarize(n = n()) %>% 
filter(n == 2) %>% select(S_name)

The cost is a little larger than the optimal. Mainly because of the filter having n > 2 besides n == 2.

11

Generated:
RET_DF1618 <- left_join(input1, input0)
RET_DF1619 <- anti_join(select(input0,S_name), select(RET_DF1618, S_name))
RET_DF1620 <- RET_DF1619 %>% ungroup() %>% select(S_name) %>% distinct()

Optimal:
anti_join(student,enrolled) %>% select(S_name)

The larger cost is due to the extra left_join.

14

Generated:
RET_DF193 <- input0 %>% group_by(S_key) %>% summarise(n = n())
RET_DF194 <- filter(RET_DF193, n == max(n))
RET_DF195 <- inner_join(inner_join(inner_join(input1, input0), input2), RET_DF194)
RET_DF196 <- RET_DF195 %>% ungroup() %>% select(S_name) %>% distinct()

Optimal:
inner_join(parts,catalog) %>% inner_join(suppliers) %>% 
group_by(sname) %>% summarise(n=n()) %>% 
filter(n == max(n)) %>% select(sname)

There is some information that relates with each other, such as S_name and S_key. The larger cost is due to the inner_join of an unnecessary table, which is produced by grouping by S_key.




